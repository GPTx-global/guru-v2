// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: guru/oracle/v1/query.proto

package oraclev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName            = "/guru.oracle.v1.Query/Params"
	Query_OracleSubmitData_FullMethodName  = "/guru.oracle.v1.Query/OracleSubmitData"
	Query_OracleData_FullMethodName        = "/guru.oracle.v1.Query/OracleData"
	Query_OracleRequestDoc_FullMethodName  = "/guru.oracle.v1.Query/OracleRequestDoc"
	Query_OracleRequestDocs_FullMethodName = "/guru.oracle.v1.Query/OracleRequestDocs"
	Query_ModeratorAddress_FullMethodName  = "/guru.oracle.v1.Query/ModeratorAddress"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// OracleSubmitData queries oracle data by ID
	OracleSubmitData(ctx context.Context, in *QueryOracleSubmitDataRequest, opts ...grpc.CallOption) (*QueryOracleSubmitDataResponse, error)
	// OracleData queries oracle data by ID
	OracleData(ctx context.Context, in *QueryOracleDataRequest, opts ...grpc.CallOption) (*QueryOracleDataResponse, error)
	// OracleRequestDoc queries oracle request doc by ID
	OracleRequestDoc(ctx context.Context, in *QueryOracleRequestDocRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocResponse, error)
	// OracleRequestDocs queries an oracle request document list
	OracleRequestDocs(ctx context.Context, in *QueryOracleRequestDocsRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocsResponse, error)
	// ModeratorAddress queries the moderator address
	ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleSubmitData(ctx context.Context, in *QueryOracleSubmitDataRequest, opts ...grpc.CallOption) (*QueryOracleSubmitDataResponse, error) {
	out := new(QueryOracleSubmitDataResponse)
	err := c.cc.Invoke(ctx, Query_OracleSubmitData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleData(ctx context.Context, in *QueryOracleDataRequest, opts ...grpc.CallOption) (*QueryOracleDataResponse, error) {
	out := new(QueryOracleDataResponse)
	err := c.cc.Invoke(ctx, Query_OracleData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleRequestDoc(ctx context.Context, in *QueryOracleRequestDocRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocResponse, error) {
	out := new(QueryOracleRequestDocResponse)
	err := c.cc.Invoke(ctx, Query_OracleRequestDoc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleRequestDocs(ctx context.Context, in *QueryOracleRequestDocsRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocsResponse, error) {
	out := new(QueryOracleRequestDocsResponse)
	err := c.cc.Invoke(ctx, Query_OracleRequestDocs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error) {
	out := new(QueryModeratorAddressResponse)
	err := c.cc.Invoke(ctx, Query_ModeratorAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// OracleSubmitData queries oracle data by ID
	OracleSubmitData(context.Context, *QueryOracleSubmitDataRequest) (*QueryOracleSubmitDataResponse, error)
	// OracleData queries oracle data by ID
	OracleData(context.Context, *QueryOracleDataRequest) (*QueryOracleDataResponse, error)
	// OracleRequestDoc queries oracle request doc by ID
	OracleRequestDoc(context.Context, *QueryOracleRequestDocRequest) (*QueryOracleRequestDocResponse, error)
	// OracleRequestDocs queries an oracle request document list
	OracleRequestDocs(context.Context, *QueryOracleRequestDocsRequest) (*QueryOracleRequestDocsResponse, error)
	// ModeratorAddress queries the moderator address
	ModeratorAddress(context.Context, *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) OracleSubmitData(context.Context, *QueryOracleSubmitDataRequest) (*QueryOracleSubmitDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSubmitData not implemented")
}
func (UnimplementedQueryServer) OracleData(context.Context, *QueryOracleDataRequest) (*QueryOracleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleData not implemented")
}
func (UnimplementedQueryServer) OracleRequestDoc(context.Context, *QueryOracleRequestDocRequest) (*QueryOracleRequestDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleRequestDoc not implemented")
}
func (UnimplementedQueryServer) OracleRequestDocs(context.Context, *QueryOracleRequestDocsRequest) (*QueryOracleRequestDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleRequestDocs not implemented")
}
func (UnimplementedQueryServer) ModeratorAddress(context.Context, *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModeratorAddress not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleSubmitData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleSubmitDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleSubmitData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleSubmitData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleSubmitData(ctx, req.(*QueryOracleSubmitDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleData(ctx, req.(*QueryOracleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleRequestDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleRequestDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleRequestDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleRequestDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleRequestDoc(ctx, req.(*QueryOracleRequestDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleRequestDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleRequestDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleRequestDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleRequestDocs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleRequestDocs(ctx, req.(*QueryOracleRequestDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModeratorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModeratorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModeratorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ModeratorAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModeratorAddress(ctx, req.(*QueryModeratorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guru.oracle.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "OracleSubmitData",
			Handler:    _Query_OracleSubmitData_Handler,
		},
		{
			MethodName: "OracleData",
			Handler:    _Query_OracleData_Handler,
		},
		{
			MethodName: "OracleRequestDoc",
			Handler:    _Query_OracleRequestDoc_Handler,
		},
		{
			MethodName: "OracleRequestDocs",
			Handler:    _Query_OracleRequestDocs_Handler,
		},
		{
			MethodName: "ModeratorAddress",
			Handler:    _Query_ModeratorAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guru/oracle/v1/query.proto",
}
